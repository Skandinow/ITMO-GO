package learning

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i hw4/internal/learning.TutorServiceInterface -o ./internal\learning\individual_service_mock_test.go -topN IndividualServiceMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// IndividualServiceMock implements TutorServiceInterface
type IndividualServiceMock struct {
	t minimock.Tester

	funcSubjects          func() (sa1 []string)
	inspectFuncSubjects   func()
	afterSubjectsCounter  uint64
	beforeSubjectsCounter uint64
	SubjectsMock          mIndividualServiceMockSubjects

	funcTutorsID          func(subject string) (ia1 []int64)
	inspectFuncTutorsID   func(subject string)
	afterTutorsIDCounter  uint64
	beforeTutorsIDCounter uint64
	TutorsIDMock          mIndividualServiceMockTutorsID
}

// NewIndividualServiceMock returns a mock for TutorServiceInterface
func NewIndividualServiceMock(t minimock.Tester) *IndividualServiceMock {
	m := &IndividualServiceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SubjectsMock = mIndividualServiceMockSubjects{mock: m}

	m.TutorsIDMock = mIndividualServiceMockTutorsID{mock: m}
	m.TutorsIDMock.callArgs = []*IndividualServiceMockTutorsIDParams{}

	return m
}

type mIndividualServiceMockSubjects struct {
	mock               *IndividualServiceMock
	defaultExpectation *IndividualServiceMockSubjectsExpectation
	expectations       []*IndividualServiceMockSubjectsExpectation
}

// IndividualServiceMockSubjectsExpectation specifies expectation struct of the TutorServiceInterface.Subjects
type IndividualServiceMockSubjectsExpectation struct {
	mock *IndividualServiceMock

	results *IndividualServiceMockSubjectsResults
	Counter uint64
}

// IndividualServiceMockSubjectsResults contains results of the TutorServiceInterface.Subjects
type IndividualServiceMockSubjectsResults struct {
	sa1 []string
}

// Expect sets up expected params for TutorServiceInterface.Subjects
func (mmSubjects *mIndividualServiceMockSubjects) Expect() *mIndividualServiceMockSubjects {
	if mmSubjects.mock.funcSubjects != nil {
		mmSubjects.mock.t.Fatalf("IndividualServiceMock.Subjects mock is already set by Set")
	}

	if mmSubjects.defaultExpectation == nil {
		mmSubjects.defaultExpectation = &IndividualServiceMockSubjectsExpectation{}
	}

	return mmSubjects
}

// Inspect accepts an inspector function that has same arguments as the TutorServiceInterface.Subjects
func (mmSubjects *mIndividualServiceMockSubjects) Inspect(f func()) *mIndividualServiceMockSubjects {
	if mmSubjects.mock.inspectFuncSubjects != nil {
		mmSubjects.mock.t.Fatalf("Inspect function is already set for IndividualServiceMock.Subjects")
	}

	mmSubjects.mock.inspectFuncSubjects = f

	return mmSubjects
}

// Return sets up results that will be returned by TutorServiceInterface.Subjects
func (mmSubjects *mIndividualServiceMockSubjects) Return(sa1 []string) *IndividualServiceMock {
	if mmSubjects.mock.funcSubjects != nil {
		mmSubjects.mock.t.Fatalf("IndividualServiceMock.Subjects mock is already set by Set")
	}

	if mmSubjects.defaultExpectation == nil {
		mmSubjects.defaultExpectation = &IndividualServiceMockSubjectsExpectation{mock: mmSubjects.mock}
	}
	mmSubjects.defaultExpectation.results = &IndividualServiceMockSubjectsResults{sa1}
	return mmSubjects.mock
}

// Set uses given function f to mock the TutorServiceInterface.Subjects method
func (mmSubjects *mIndividualServiceMockSubjects) Set(f func() (sa1 []string)) *IndividualServiceMock {
	if mmSubjects.defaultExpectation != nil {
		mmSubjects.mock.t.Fatalf("Default expectation is already set for the TutorServiceInterface.Subjects method")
	}

	if len(mmSubjects.expectations) > 0 {
		mmSubjects.mock.t.Fatalf("Some expectations are already set for the TutorServiceInterface.Subjects method")
	}

	mmSubjects.mock.funcSubjects = f
	return mmSubjects.mock
}

// Subjects implements TutorServiceInterface
func (mmSubjects *IndividualServiceMock) Subjects() (sa1 []string) {
	mm_atomic.AddUint64(&mmSubjects.beforeSubjectsCounter, 1)
	defer mm_atomic.AddUint64(&mmSubjects.afterSubjectsCounter, 1)

	if mmSubjects.inspectFuncSubjects != nil {
		mmSubjects.inspectFuncSubjects()
	}

	if mmSubjects.SubjectsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSubjects.SubjectsMock.defaultExpectation.Counter, 1)

		mm_results := mmSubjects.SubjectsMock.defaultExpectation.results
		if mm_results == nil {
			mmSubjects.t.Fatal("No results are set for the IndividualServiceMock.Subjects")
		}
		return (*mm_results).sa1
	}
	if mmSubjects.funcSubjects != nil {
		return mmSubjects.funcSubjects()
	}
	mmSubjects.t.Fatalf("Unexpected call to IndividualServiceMock.Subjects.")
	return
}

// SubjectsAfterCounter returns a count of finished IndividualServiceMock.Subjects invocations
func (mmSubjects *IndividualServiceMock) SubjectsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSubjects.afterSubjectsCounter)
}

// SubjectsBeforeCounter returns a count of IndividualServiceMock.Subjects invocations
func (mmSubjects *IndividualServiceMock) SubjectsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSubjects.beforeSubjectsCounter)
}

// MinimockSubjectsDone returns true if the count of the Subjects invocations corresponds
// the number of defined expectations
func (m *IndividualServiceMock) MinimockSubjectsDone() bool {
	for _, e := range m.SubjectsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SubjectsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSubjectsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSubjects != nil && mm_atomic.LoadUint64(&m.afterSubjectsCounter) < 1 {
		return false
	}
	return true
}

// MinimockSubjectsInspect logs each unmet expectation
func (m *IndividualServiceMock) MinimockSubjectsInspect() {
	for _, e := range m.SubjectsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to IndividualServiceMock.Subjects")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SubjectsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSubjectsCounter) < 1 {
		m.t.Error("Expected call to IndividualServiceMock.Subjects")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSubjects != nil && mm_atomic.LoadUint64(&m.afterSubjectsCounter) < 1 {
		m.t.Error("Expected call to IndividualServiceMock.Subjects")
	}
}

type mIndividualServiceMockTutorsID struct {
	mock               *IndividualServiceMock
	defaultExpectation *IndividualServiceMockTutorsIDExpectation
	expectations       []*IndividualServiceMockTutorsIDExpectation

	callArgs []*IndividualServiceMockTutorsIDParams
	mutex    sync.RWMutex
}

// IndividualServiceMockTutorsIDExpectation specifies expectation struct of the TutorServiceInterface.TutorsID
type IndividualServiceMockTutorsIDExpectation struct {
	mock    *IndividualServiceMock
	params  *IndividualServiceMockTutorsIDParams
	results *IndividualServiceMockTutorsIDResults
	Counter uint64
}

// IndividualServiceMockTutorsIDParams contains parameters of the TutorServiceInterface.TutorsID
type IndividualServiceMockTutorsIDParams struct {
	subject string
}

// IndividualServiceMockTutorsIDResults contains results of the TutorServiceInterface.TutorsID
type IndividualServiceMockTutorsIDResults struct {
	ia1 []int64
}

// Expect sets up expected params for TutorServiceInterface.TutorsID
func (mmTutorsID *mIndividualServiceMockTutorsID) Expect(subject string) *mIndividualServiceMockTutorsID {
	if mmTutorsID.mock.funcTutorsID != nil {
		mmTutorsID.mock.t.Fatalf("IndividualServiceMock.TutorsID mock is already set by Set")
	}

	if mmTutorsID.defaultExpectation == nil {
		mmTutorsID.defaultExpectation = &IndividualServiceMockTutorsIDExpectation{}
	}

	mmTutorsID.defaultExpectation.params = &IndividualServiceMockTutorsIDParams{subject}
	for _, e := range mmTutorsID.expectations {
		if minimock.Equal(e.params, mmTutorsID.defaultExpectation.params) {
			mmTutorsID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTutorsID.defaultExpectation.params)
		}
	}

	return mmTutorsID
}

// Inspect accepts an inspector function that has same arguments as the TutorServiceInterface.TutorsID
func (mmTutorsID *mIndividualServiceMockTutorsID) Inspect(f func(subject string)) *mIndividualServiceMockTutorsID {
	if mmTutorsID.mock.inspectFuncTutorsID != nil {
		mmTutorsID.mock.t.Fatalf("Inspect function is already set for IndividualServiceMock.TutorsID")
	}

	mmTutorsID.mock.inspectFuncTutorsID = f

	return mmTutorsID
}

// Return sets up results that will be returned by TutorServiceInterface.TutorsID
func (mmTutorsID *mIndividualServiceMockTutorsID) Return(ia1 []int64) *IndividualServiceMock {
	if mmTutorsID.mock.funcTutorsID != nil {
		mmTutorsID.mock.t.Fatalf("IndividualServiceMock.TutorsID mock is already set by Set")
	}

	if mmTutorsID.defaultExpectation == nil {
		mmTutorsID.defaultExpectation = &IndividualServiceMockTutorsIDExpectation{mock: mmTutorsID.mock}
	}
	mmTutorsID.defaultExpectation.results = &IndividualServiceMockTutorsIDResults{ia1}
	return mmTutorsID.mock
}

// Set uses given function f to mock the TutorServiceInterface.TutorsID method
func (mmTutorsID *mIndividualServiceMockTutorsID) Set(f func(subject string) (ia1 []int64)) *IndividualServiceMock {
	if mmTutorsID.defaultExpectation != nil {
		mmTutorsID.mock.t.Fatalf("Default expectation is already set for the TutorServiceInterface.TutorsID method")
	}

	if len(mmTutorsID.expectations) > 0 {
		mmTutorsID.mock.t.Fatalf("Some expectations are already set for the TutorServiceInterface.TutorsID method")
	}

	mmTutorsID.mock.funcTutorsID = f
	return mmTutorsID.mock
}

// When sets expectation for the TutorServiceInterface.TutorsID which will trigger the result defined by the following
// Then helper
func (mmTutorsID *mIndividualServiceMockTutorsID) When(subject string) *IndividualServiceMockTutorsIDExpectation {
	if mmTutorsID.mock.funcTutorsID != nil {
		mmTutorsID.mock.t.Fatalf("IndividualServiceMock.TutorsID mock is already set by Set")
	}

	expectation := &IndividualServiceMockTutorsIDExpectation{
		mock:   mmTutorsID.mock,
		params: &IndividualServiceMockTutorsIDParams{subject},
	}
	mmTutorsID.expectations = append(mmTutorsID.expectations, expectation)
	return expectation
}

// Then sets up TutorServiceInterface.TutorsID return parameters for the expectation previously defined by the When method
func (e *IndividualServiceMockTutorsIDExpectation) Then(ia1 []int64) *IndividualServiceMock {
	e.results = &IndividualServiceMockTutorsIDResults{ia1}
	return e.mock
}

// TutorsID implements TutorServiceInterface
func (mmTutorsID *IndividualServiceMock) TutorsID(subject string) (ia1 []int64) {
	mm_atomic.AddUint64(&mmTutorsID.beforeTutorsIDCounter, 1)
	defer mm_atomic.AddUint64(&mmTutorsID.afterTutorsIDCounter, 1)

	if mmTutorsID.inspectFuncTutorsID != nil {
		mmTutorsID.inspectFuncTutorsID(subject)
	}

	mm_params := &IndividualServiceMockTutorsIDParams{subject}

	// Record call args
	mmTutorsID.TutorsIDMock.mutex.Lock()
	mmTutorsID.TutorsIDMock.callArgs = append(mmTutorsID.TutorsIDMock.callArgs, mm_params)
	mmTutorsID.TutorsIDMock.mutex.Unlock()

	for _, e := range mmTutorsID.TutorsIDMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ia1
		}
	}

	if mmTutorsID.TutorsIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTutorsID.TutorsIDMock.defaultExpectation.Counter, 1)
		mm_want := mmTutorsID.TutorsIDMock.defaultExpectation.params
		mm_got := IndividualServiceMockTutorsIDParams{subject}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTutorsID.t.Errorf("IndividualServiceMock.TutorsID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTutorsID.TutorsIDMock.defaultExpectation.results
		if mm_results == nil {
			mmTutorsID.t.Fatal("No results are set for the IndividualServiceMock.TutorsID")
		}
		return (*mm_results).ia1
	}
	if mmTutorsID.funcTutorsID != nil {
		return mmTutorsID.funcTutorsID(subject)
	}
	mmTutorsID.t.Fatalf("Unexpected call to IndividualServiceMock.TutorsID. %v", subject)
	return
}

// TutorsIDAfterCounter returns a count of finished IndividualServiceMock.TutorsID invocations
func (mmTutorsID *IndividualServiceMock) TutorsIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTutorsID.afterTutorsIDCounter)
}

// TutorsIDBeforeCounter returns a count of IndividualServiceMock.TutorsID invocations
func (mmTutorsID *IndividualServiceMock) TutorsIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTutorsID.beforeTutorsIDCounter)
}

// Calls returns a list of arguments used in each call to IndividualServiceMock.TutorsID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTutorsID *mIndividualServiceMockTutorsID) Calls() []*IndividualServiceMockTutorsIDParams {
	mmTutorsID.mutex.RLock()

	argCopy := make([]*IndividualServiceMockTutorsIDParams, len(mmTutorsID.callArgs))
	copy(argCopy, mmTutorsID.callArgs)

	mmTutorsID.mutex.RUnlock()

	return argCopy
}

// MinimockTutorsIDDone returns true if the count of the TutorsID invocations corresponds
// the number of defined expectations
func (m *IndividualServiceMock) MinimockTutorsIDDone() bool {
	for _, e := range m.TutorsIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TutorsIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTutorsIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTutorsID != nil && mm_atomic.LoadUint64(&m.afterTutorsIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockTutorsIDInspect logs each unmet expectation
func (m *IndividualServiceMock) MinimockTutorsIDInspect() {
	for _, e := range m.TutorsIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IndividualServiceMock.TutorsID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TutorsIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTutorsIDCounter) < 1 {
		if m.TutorsIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IndividualServiceMock.TutorsID")
		} else {
			m.t.Errorf("Expected call to IndividualServiceMock.TutorsID with params: %#v", *m.TutorsIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTutorsID != nil && mm_atomic.LoadUint64(&m.afterTutorsIDCounter) < 1 {
		m.t.Error("Expected call to IndividualServiceMock.TutorsID")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IndividualServiceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockSubjectsInspect()

		m.MinimockTutorsIDInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IndividualServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IndividualServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSubjectsDone() &&
		m.MinimockTutorsIDDone()
}
